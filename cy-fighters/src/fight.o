#ifndef FIGHT_O
#define FIGHT_O

#include "initialization.o"
#include "script.o"

int ask(int max) {
    int choix = -1;
    int result;

    do {
        printf(
            "\033[0m"
            "\033[38;5;214m"
            "\033[3m"
            "\nFaites votre choix de 0 a %d  ? "
            "\033[0m", max - 1
        );

        result = scanf("%d", &choix);

        if (result != 1 || choix < 0 || choix >= max) {
            printf(
                "\033[1;39m"
                "Votre choix est hors de portee. Essayez a nouveau entre 0 et %d.\n"
                "\033[0m", max - 1
            );
            while (getchar() != '\n');
        }
    } while (result != 1 || choix < 0 || choix >= max);

    return choix;
}

int select_skill(Fighters *fighters, int fighter_index) {
    printf(
        "\033[0m"
        "\033[38;5;214m"
        "\033[3m"
        "%s, de quel competence allez-vous faire preuve ?\n"
        "\033[0m", fighters[fighter_index].nom
    );

    for (int i = 0; i < fighters[fighter_index].nb_skills; i++) {
        if (fighters[fighter_index].skills[i].nom == NULL || fighters[fighter_index].skills[i].description == NULL) {
            printf("\033[1;31mErreur : competence non initialisee pour l'index %d.\033[0m\n", i);
            continue;
        }

        if (fighters[fighter_index].reload[i] > 0) {
            printf(
                "\033[1;31m%d ~ %s "
                "(En recharge : %d tours restants)\033[0m\n",
                i, fighters[fighter_index].skills[i].nom, fighters[fighter_index].reload[i]
            );
        } else {
            printf(
                "\033[1;37m%d ~ %s\033[0m : %s\n",
                i, fighters[fighter_index].skills[i].nom, fighters[fighter_index].skills[i].description
            );
        }
    }

    int choix;
    do {
        choix = ask(fighters[fighter_index].nb_skills);
        if (fighters[fighter_index].reload[choix] > 0) {
            printf(
                "\033[1;31m"
                "Cette competence est en recharge. Choisissez une autre competence."
                "\033[0m\n"
            );
        }
    } while (fighters[fighter_index].reload[choix] > 0);

    return choix;
}



void attack_target(Fighters attacker[], Fighters target[], int skill_index, int degats) {

    /*
    Appliquer les degats à la cible
    Afficher le message d'attaque
    Vérifier si la cible est vaincue
    Si oui, afficher le message de victoire
    Sinon, afficher les PV restants
    */
    if (skill_index < 0 || skill_index >= MAX_SKILLS) {
        printf(
            "\033[1;37m"
            "Index de competence invalide."
            "\033[0m\n"
        );
        exit(1);
    }

    /*
    Calculer la chance d'esquiver l'attaque par rapport à l'agilité de la cible
    en fonction de l'agilité de l'attaquant
    */
    int chance_escape = (*target).agilite - (*attacker).agilite;

    // Si la cible a une chance d'esquiver l'attaque, on génère un nombre aléatoire

    if(chance_escape > 0){
        int random_value = rand()%100; 
        if(random_value < chance_escape){
            printf(
                "\033[1;37m"    
                "%s a esquive l'attaque de %s !"
                "\033[0m\n", (*target).nom, (*attacker).nom
            );

            return;
        }   
    }

    // Si l'attaque n'est pas esquivée, on applique les dégâts
    (*target).pv_courant -= degats; 

    printf(
        "\033[1;37m"
        "%s attaque %s avec %s et inflige %d degats !"
        "\033[0m\n", (*attacker).nom, (*target).nom, (*attacker).skills[skill_index].nom, degats
    );

    if ((*target).pv_courant <= 0) {
        
        printf(
            "\033[1;37m"
            "%s a ete vaincu !"
            "\033[0m\n", (*target).nom
        );
        (*target).pv_courant = 0; // Réinitialisation des PV de la cible
    } else {
        printf(
            "\033[1;37m"
            "%s a encore %d PV restants."
            "\033[0m\n", (*target).nom, (*target).pv_courant
        );
    }
}

void apply_effect(Fighters *target, const char *effect_name, int valeur, int tours) {
    /*
    Vérifier si la cible et le nom de l'effet sont valides
    Appliquer l'effet sur la cible
    Afficher le message d'application de l'effet
    */
    if (target == NULL || effect_name == NULL || tours <= 0) {
        printf("Erreur: cible ou nom d'effet invalide.\n");
        exit(1);
    }

    // Limiter la valeur de l'effet pour éviter des valeurs absurdes
    if (valeur < 0) {
        valeur = 0;
    } else if (valeur > 1000) { // Exemple de limite arbitraire
        valeur = 1000;
    }

    for (int i = 0; i < MAX_EFFETS; i++) {
        if ((*target).effects[i].tours_restants == 0) {
            strcpy((*target).effects[i].nom, effect_name);
            (*target).effects[i].valeur = valeur;
            (*target).effects[i].tours_restants = tours;
            printf(
                "\033[1;37m"
                "%s subit l'effet %s de %d pour %d tours !"
                "\033[0m\n", (*target).nom, effect_name, valeur, tours
            );
            return;
        }
    }
    printf(
        "\033[1;37m"
        "Impossible d'appliquer l'effet %s sur %s, pas de place disponible."
        "\033[0m\n", effect_name, (*target).nom
    );
}

void update_effects(Fighters *target) {
    /*
    Vérifier si la cible est valide
    Appliquer les effets actifs sur la cible
    Réduire la durée de l'effet
    Afficher le message d'expiration de l'effet
    Réinitialiser les statistiques affectées
    Réinitialiser l'effet
    */
    for (int i = 0; i < MAX_EFFETS; i++) {
        if ((*target).effects[i].tours_restants > 0) {
            // Appliquer les effets actifs
            if (strcmp((*target).effects[i].nom, "saignement") == 0) {
                int saignement = (*target).effects[i].valeur;
                (*target).pv_courant -= saignement;
                if ((*target).pv_courant < 0) {
                    (*target).pv_courant = 0;
                }
                printf(
                    "\033[1;37m"
                    "%s perd %d PV a cause de l'effet de saignement !"
                    "\033[0m\n", target->nom, saignement
                );
            }
            if (strcmp((*target).effects[i].nom, "regeneration") == 0) {
                int regeneration = (*target).effects[i].valeur;
                (*target).pv_courant += regeneration;
                if ((*target).pv_courant > (*target).pv_max) {
                    (*target).pv_courant = (*target).pv_max;
                }
                printf(
                    "\033[1;37m"
                    "%s regagne %d PV grace a l'effet de regeneration !"
                    "\033[0m\n", target->nom, regeneration
                );
            }
            if (strcmp((*target).effects[i].nom, "bonus d'attaque") == 0) {
                (*target).attaque += (*target).effects[i].valeur;
            }
            if (strcmp((*target).effects[i].nom, "reduction d'attaque") == 0) {
                (*target).attaque -= (*target).effects[i].valeur;
            }
            if (strcmp((*target).effects[i].nom, "reduction de defense") == 0) {
                (*target).defense -= (*target).effects[i].valeur;
            }
            if (strcmp((*target).effects[i].nom, "bonus d'agilite") == 0) {
                (*target).agilite += (*target).effects[i].valeur;
            }
            if (strcmp((*target).effects[i].nom, "reduction d'agilite") == 0) {
                (*target).agilite -= (*target).effects[i].valeur;
            }
            if (strcmp((*target).effects[i].nom, "bonus de vitesse") == 0) {
                (*target).vitesse += (*target).effects[i].valeur;
            }
            if (strcmp((*target).effects[i].nom, "reduction de vitesse") == 0) {
                (*target).vitesse -= (*target).effects[i].valeur;
            }

                // Réduire la durée de l'effet
            (*target).effects[i].tours_restants--;
            if ((*target).effects[i].tours_restants <= 0) {
                printf(
                    "\033[1;37m"
                    "L'effet %s sur %s a expire !"
                    "\033[0m\n", (*target).effects[i].nom, target->nom
                );

                // Réinitialiser les statistiques affectées
                if (strcmp((*target).effects[i].nom, "bonus d'attaque") == 0) {
                    (*target).attaque -= (*target).effects[i].valeur;
                }
                if (strcmp((*target).effects[i].nom, "reduction d'attaque") == 0) {
                    (*target).attaque += (*target).effects[i].valeur;
                }
                if (strcmp((*target).effects[i].nom, "bonus d'agilite") == 0) {
                    (*target).agilite -= (*target).effects[i].valeur;
                }
                if (strcmp((*target).effects[i].nom, "reduction d'agilite") == 0) {
                    (*target).agilite += (*target).effects[i].valeur;
                }
                if (strcmp((*target).effects[i].nom, "bonus de vitesse") == 0) {
                    (*target).vitesse -= (*target).effects[i].valeur;
                }
                if (strcmp((*target).effects[i].nom, "reduction de vitesse") == 0) {
                    (*target).vitesse += (*target).effects[i].valeur;
                }
                if (strcmp((*target).effects[i].nom, "reduction de defense") == 0) {
                    (*target).defense += (*target).effects[i].valeur;
                }

                // Réinitialiser l'effet
                (*target).effects[i].nom[0] = '\0';
                (*target).effects[i].valeur = 0;
            }
        }
    }
}


void update_reload(Fighters *fighter) {
    /*
    Reinitialiser le temps de recharge des compétences
    */
    for (int i = 0; i < (*fighter).nb_skills; i++) {
        if ((*fighter).reload[i] > 0) {
            (*fighter).reload[i]--;
        }
    }
}

void effect_target(Fighters *attacker, Fighters *target, int skill_index) {
    /*
    Appliquer l'effet de la compétence sur la cible
    Afficher le message d'application de l'effet
    Vérifier si la cible est vaincue
    Si oui, afficher le message de victoire
    Sinon, afficher les PV restants
    */
    Skills skill = (*attacker).skills[skill_index];

    printf(
        "\033[1;37m"
        "%s utilise %s sur %s !"
        "\033[0m\n", (*attacker).nom, skill.nom, (*target).nom
    );

    if (strcmp(skill.nom, "Coup du vagabond") == 0) {
        /*
        Concernant la compétence "Coup du vagabond", on applique les dégâts
        et on applique l'effet de saignement sur la cible
        */
        int degats = (*attacker).attaque * skill.coefficient - (*target).defense;
        if (degats <= 0){
            degats = 0;
        }
        attack_target(attacker, target, skill_index, degats);
    }
        /*
        Concernant la compétence "Determination", "Frappe decisive", "Danse de lames" on applique les dégâts
        et on applique l'effet de réduction
        de défense sur la cible
        */
    if (strcmp(skill.nom, "Determination") == 0) {
        int bonus = (*attacker).attaque * 0.5;
        (*attacker).attaque += bonus;
        apply_effect(attacker, "bonus d'attaque", bonus, skill.tours_actifs);
        printf(
            "\033[1;37m"
            "%s augmente son attaque de %d points pour %d tours !"
            "\033[0m\n", (*attacker).nom, bonus, skill.tours_actifs
        );
    }
    if (strcmp(skill.nom, "Frappe decisive") == 0) {
        int degats = (*attacker).attaque * skill.coefficient - (*target).defense;
        if (degats < 0){
            degats = 0;
        }
        attack_target(attacker, target, skill_index, degats);
    }
    if (strcmp(skill.nom, "Danse de lames") == 0) {
        int degats = (*attacker).attaque * skill.coefficient - (*target).defense;
        if (degats < 0) {
            degats = 0;
        }
        int degats2 = degats / 3;
        for (int i = 0; i < 3; i++) {
            attack_target(attacker, target, skill_index, degats2);
        }
    }
    if (strcmp(skill.nom, "Regeneration") == 0) {
        int heal = (*attacker).pv_max * 0.2;
        (*attacker).pv_courant += heal;
        if ((*attacker).pv_courant > (*attacker).pv_max) {
            (*attacker).pv_courant = (*attacker).pv_max;
        }
        apply_effect(attacker, "regeneration", heal, skill.tours_actifs);
        printf(
            "\033[1;37m"
            "%s restaure %d PV !"
            "\033[0m\n", (*attacker).nom, heal
        );
    }
    if (strcmp(skill.nom, "Lame ecarlate") == 0) {
        int degats = (*attacker).attaque * skill.coefficient - (*target).defense;
        if (degats < 0){
            degats = 0;
        }
        attack_target(attacker, target, skill_index, degats);
        int saignement = (*target).pv_max * 0.1;
        (*target).pv_courant -= saignement;
        if ((*target).pv_courant < 0) {
            (*target).pv_courant = 0;
        }
        apply_effect(target, "saignement", saignement, skill.tours_actifs);
        printf(
            "\033[1;37m"
            "%s applique un effet de saignement sur %s !"
            "\033[0m\n", (*attacker).nom, (*target).nom
        );
    }
    if (strcmp(skill.nom, "Frappe colossale") == 0) {
        int degats = (*attacker).attaque * skill.coefficient - (*target).defense;
        if (degats < 0) {
            degats = 0;
        }
        attack_target(attacker, target, skill_index, degats);
        int reduction = (*target).agilite * 0.5;
        (*target).agilite -= reduction;
        apply_effect(target, "reduction d'agilite", reduction, skill.tours_actifs);
        printf(
            "\033[1;37m"
            "%s reduit l'agilite de %s de %d points !"
            "\033[0m\n", (*attacker).nom, (*target).nom, reduction
        );
        attack_target(attacker, target, skill_index, degats);
    }
    if(strcmp(skill.nom, "Rugissement bestial")==0){
        int degats = (*attacker).attaque * skill.coefficient - (*target).defense;
        if (degats < 0){
            degats = 0;
        }
        attack_target(attacker, target, skill_index, degats);
        for(int i=0; i<MAX_MEMBRES; i++){
            int reduction = target[i].attaque * 0.3;
            target[i].attaque -= reduction;
            apply_effect(&target[i], "reduction d'attaque", reduction, skill.tours_actifs);
            printf(
                "\033[1;37m"
                "%s reduit l'attaque de %s de %d points !"
                "\033[0m\n", (*attacker).nom, target[i].nom, reduction 
            );
        }
    }
    if (strcmp(skill.nom, "Ecrasement terrestre") == 0) {
        for(int i = 0; i < MAX_MEMBRES; i++) {
            int degats = (*attacker).attaque * skill.coefficient - target[i].defense;
            if (degats < 0){
                degats = 0;
            }
            attack_target(attacker, &target[i], skill_index, degats);
        }
        printf(
            "\033[1;37m"
            "%s inflige des degats de zone !"
            "\033[0m\n", (*attacker).nom
        );
    }
    if (strcmp(skill.nom, "Etoile glaciale") == 0) {
        int degats = (*attacker).attaque * skill.coefficient - (*target).defense;
        if (degats <= 0) {
            degats = 0;
        }
        attack_target(attacker, target, skill_index, degats);
        int reduction = (*target).vitesse * 0.3;
        (*target).vitesse -= reduction;
        apply_effect(target, "reduction de vitesse", reduction, skill.tours_actifs);
        printf(
            "\033[1;37m"
            "%s reduit la vitesse de %s de %d points !"
            "\033[0m\n", (*attacker).nom, (*target).nom, reduction
        );
    }
    if (strcmp(skill.nom, "Benediction lunaire") == 0) {
        int bonus = (*attacker).agilite * 0.5;
        (*attacker).agilite += bonus;
        apply_effect(attacker, "bonus d'agilite", bonus, skill.tours_actifs);
        int bonus_2 = (*attacker).vitesse * 0.5;
        (*attacker).vitesse += bonus_2;
        apply_effect(attacker, "bonus de vitesse", bonus_2, skill.tours_actifs);
        printf(
            "\033[1;37m"
            "%s augmente son agilite de %d points et sa vitesse de %d points !"
            "\033[0m\n", (*attacker).nom, bonus, bonus_2
        );
    }
    if (strcmp(skill.nom, "Pluie d'etoiles") == 0) {
        for(int i = 0; i < MAX_MEMBRES; i++) {
            int degats = (*attacker).attaque * skill.coefficient - target[i].defense;
            if (degats < 0) {
                degats = 0;
            }
            attack_target(attacker, &target[i], skill_index, degats);
        }
        printf(
            "\033[1;37m"
            "%s inflige des degats de zone !"
            "\033[0m\n", (*attacker).nom
        );
    }
    if (strcmp(skill.nom, "Flammes sanglantes") == 0) {
        int degats = (*attacker).attaque * skill.coefficient - (*target).defense;
        if (degats < 0) {
            degats = 0;
        }
        attack_target(attacker, target, skill_index, degats);
        int saignement = (*target).pv_max * 0.1;
        (*target).pv_courant -= saignement;
        if ((*target).pv_courant < 0) {
            (*target).pv_courant = 0;
        }
        apply_effect(target, "saignement", saignement, skill.tours_actifs);
        printf(
            "\033[1;37m"
            "%s applique un effet de saignement sur %s !"
            "\033[0m\n", (*attacker).nom, (*target).nom
            );
    }
    if (strcmp(skill.nom, "Rituel interdit") == 0) {
        for(int i = 0; i < MAX_MEMBRES; i++) {
            int degats = (*attacker).attaque * skill.coefficient - target[i].defense;
            if (degats < 0) {
                degats = 0;
            }
            attack_target(attacker, &target[i], skill_index, degats);
        }
        printf(
            "\033[1;37m"
            "%s inflige des degats de zone !"
            "\033[0m\n", (*attacker).nom
        );
        int self_damage = (*attacker).pv_max * 0.2;
        (*attacker).pv_courant -= self_damage;
        printf(
            "\033[1;37m"
            "%s perd %d PV en utilisant le Rituel interdit !"
            "\033[0m\n", (*attacker).nom, self_damage
        );
        if ((*attacker).pv_courant < 0) {
            (*attacker).pv_courant = 0;
        }
    }
    if (strcmp(skill.nom, "Marque du sang") == 0) {
        int reduction = (*target).defense * 0.3;
        (*target).defense -= reduction;
        apply_effect(target, "reduction de defense", reduction, skill.tours_actifs);
        printf(
            "\033[1;37m"
            "%s reduit la defense de %s de %d points pour %d tours !"
            "\033[0m\n", (*attacker).nom, (*target).nom, reduction, skill.tours_actifs
        );
    }
    if (strcmp(skill.nom, "Lame sacree") == 0) {
        int degats = (*attacker).attaque * skill.coefficient - (*target).defense;
        if (degats <= 0) {
            degats = 0;
        }
        attack_target(attacker, target, skill_index, degats);
    }
    if (strcmp(skill.nom, "Pluie de lames") == 0) {
        int degats = (*attacker).attaque * skill.coefficient - (*target).defense;
        if (degats < 0) {
            degats = 0;
        }
        int degats2 = degats / 3;
        for (int i = 0; i < 3; i++) {
            attack_target(attacker, target, skill_index, degats2);
        }
    }
    if (strcmp(skill.nom, "Jugement divin") == 0) {
        for(int i = 0; i < MAX_MEMBRES; i++) {
            int degats = (*attacker).attaque * skill.coefficient - target[i].defense;
            if (degats < 0) {
                degats = 0;
            }
            attack_target(attacker, &target[i], skill_index, degats);
        }
        printf(
            "\033[1;37m"
            "%s inflige des degats de zone !"
            "\033[0m\n", (*attacker).nom
        );
    }
    (*attacker).reload[skill_index] = skill.tours_recharge;
}

void speed_select(Fighters fighters[],int taille){
    /*
    Trier les combattants par vitesse
    Utiliser un algorithme de tri simple
    */
    // Complexité O(1) (Espace)

    // Complexité O(n^2) (Temps)
    for(int i=0; i<taille; i++){
        for(int j=i+1; j<taille; j++){  // Tri dans l'ordre decroissant
            if(fighters[i].vitesse < fighters[j].vitesse){
                Fighters temporary = fighters[i];
                fighters[i] = fighters[j]; 
                fighters[j] = temporary;
            }
        }
    }
}

void runround(Teams *team, Fighters *attacker, Fighters enemy_team[], int nb_enemies) {
    printf("\n\033[1;37mDebut du tour de %s !\033[0m\n", (*team).nom);
    // Vérifier si l'attaquant est encore en vie
    if ((*attacker).pv_courant <= 0) {
        printf("\033[1;31m%s est deja vaincu et ne peut pas agir.\033[0m\n", (*attacker).nom);
        return;
    }

    // Sélectionner une cible
    printf("Choisissez une cible parmi l'equipe adverse :\n");
    for (int i = 0; i < nb_enemies; i++) {
        printf("\033[1;37m%d ~ %s (%d PV restants)\033[0m\n", i, enemy_team[i].nom, enemy_team[i].pv_courant);
    }
    int target_index = ask(nb_enemies);

    // Vérifier si la cible est encore en vie
    if (enemy_team[target_index].pv_courant <= 0) {
        printf("\033[1;31mLa cible %s est deja vaincue. Choisissez une autre cible.\033[0m\n", enemy_team[target_index].nom);
        return;
    }

    // Sélectionner une compétence
    int skill_index = select_skill(attacker, 0);

    // Appliquer les effets de la compétence
    effect_target(attacker, &enemy_team[target_index], skill_index);

    // Mettre à jour les tours de recharge
    update_reload(attacker);

    // Mettre à jour les effets actifs
    update_effects(attacker);
    printf("\n\033[1;37mFin du tour de %s !\033[0m\n", (*team).nom);
}

void playervsuniver(Teams *team, Fighters *player_team, int nb_players, Fighters *enemy_team, int nb_enemies) {

    // Combiner les deux équipes pour gérer les tours en fonction de la vitesse
    Fighters all_fighters[MAX_MEMBRES*2];
    int total_fighters = nb_players + nb_enemies;
    // Ajouter le suffixe (e1) pour les robots de l'équipe 1
        

    for (int i = 0; i < nb_players; i++) {
        all_fighters[i] = player_team[i];
        if (strlen(all_fighters[i].nom) + strlen(" (e1)") < MAX_CARATERES) {
            strcat(all_fighters[i].nom, " (e1)");
        } else {
            printf("Erreur : nom du combattant trop long pour ajouter le suffixe.\n");
            exit(1);
        }
    }
    for (int i = 0; i < nb_enemies; i++) {
        all_fighters[nb_players + i] = enemy_team[i];
        if (strlen(all_fighters[nb_players + i].nom) + strlen(" (e2)") < MAX_CARATERES) {
            strcat(all_fighters[nb_players + i].nom, " (e2)");
        } else {
            printf("Erreur : nom du combattant trop long pour ajouter le suffixe.\n");
            exit(1);
        }
    }

    // Trier les combattants par vitesse
    // !
    speed_select(all_fighters, total_fighters);

    // Boucle principale du jeu
    int context = 1; // Variable de contrôle pour la boucle principale
    while(context) {
        for (int i = 0; i < 2; i++) {
            Fighters *attacker = &all_fighters[i];

            // Vérifier si l'attaquant est encore en vie
            if (attacker->pv_courant <= 0) {
                continue; // Passer le tour si le combattant est vaincu
            }
            if (i < 1) {
                // Tour d'un joueur
                runround(team, attacker, enemy_team, nb_enemies);
            } else {
                // Tour d'un ennemi
                printf("\n\033[1;37mTour de l'univers !\033[0m\n");
                int target_index = rand() % nb_players;
                while (player_team[target_index].pv_courant <= 0) {
                    target_index = rand() % nb_players; // Choisir une cible valide
                }
                int skill_index = rand() % attacker->nb_skills;
                effect_target(attacker, &player_team[target_index], skill_index);
                update_reload(attacker);
                update_effects(attacker);
            }

            // Vérifier si une équipe est vaincue
            int players_alive = 0, enemies_alive = 0;
            for (int j = 0; j < nb_players; j++) {
                if (player_team[j].pv_courant > 0) players_alive++;
            }
            for (int j = 0; j < nb_enemies; j++) {
                if (enemy_team[j].pv_courant > 0) enemies_alive++;
            }

            if (players_alive == 0) {
                printf("\n\033[1;31mL'equipe a perdu !\033[0m\n");
                lose();
                context = 0; // Sortir de la boucle principale
                break;
            } else if (enemies_alive == 0) {
                printf("\n\033[1;32mL'univers a perdu !\033[0m\n");
                win();
                context = 0; // Sortir de la boucle principalent
                break;
            }
        }
    }
}

void  playervsplayer(Teams *team1, Fighters *player_team1, int nb_players1, Teams *team2, Fighters *player_team2, int nb_players2) {

    // Combiner les deux équipes pour gérer les tours en fonction de la vitesse
    Fighters all_fighters[MAX_MEMBRES * 2];
    int total_fighters = nb_players1 + nb_players2;

    for (int i = 0; i < nb_players1; i++) {
        all_fighters[i] = player_team1[i];
            if (strlen(all_fighters[i].nom) + strlen(" (e1)") < MAX_CARATERES) {
                strcat(all_fighters[i].nom, " (e1)");
            } else {
                printf("Erreur : nom du combattant trop long pour ajouter le suffixe.\n");
                exit(1);
            }
    }
    for (int i = 0; i < nb_players2; i++) {
        all_fighters[nb_players1 + i] = player_team2[i];
        if (strlen(all_fighters[nb_players1 + i].nom) + strlen(" (e2)") < MAX_CARATERES) {
            strcat(all_fighters[nb_players1 + i].nom, " (e2)");
        } else {
            printf("Erreur : nom du combattant trop long pour ajouter le suffixe.\n");
            exit(1);
        }
    }

    // Trier les combattants par vitesse
    speed_select(all_fighters, total_fighters);

    // Boucle principale du jeu
    int context = 1; // Variable de contrôle pour la boucle principale
    while (context) {
        for (int i = 0; i < 2; i++) {
            Fighters *attacker = &all_fighters[i];

            // Vérifier si l'attaquant est encore en vie
            if (attacker->pv_courant <= 0) {
                continue; // Passer le tour si le combattant est vaincu
            }

            if (i < 1) {
                // Tour d'un joueur de l'équipe 1
                runround(team1, attacker, player_team2, nb_players2);
            } else {
                // Tour d'un joueur de l'équipe 2
                runround(team2, attacker, player_team1, nb_players1);
            }

            // Vérifier si une équipe est vaincue
            int players1_alive = 0, players2_alive = 0;
            for (int j = 0; j < nb_players1; j++) {
                if (player_team1[j].pv_courant > 0) players1_alive++;
            }
            for (int j = 0; j < nb_players2; j++) {
                if (player_team2[j].pv_courant > 0) players2_alive++;
            }

            if (players1_alive == 0) {
                printf("\n\033[1;31mL'equipe 1 a perdu !\033[0m\n");
                lose();
                printf("\n\033[1;32mL'equipe 2 a gagner !\033[0m\n");
                win();
                context = 0; // Sortir de la boucle principale
                break;
            } else if (players2_alive == 0) {
                printf("\n\033[1;32mL'equipe 2 a perdu !\033[0m\n");
                lose();
                printf("\n\033[1;31mL'equipe 1 a gagner !\033[0m\n");
                win();
                context = 0; // Sortir de la boucle principale
                break;
            }
        }
    }
}

void robotvsrobot(Teams *team1, Fighters *robot_team1, int nb_robots1, Teams *team2, Fighters *robot_team2, int nb_robots2) {

    // Combiner les deux équipes pour gérer les tours en fonction de la vitesse
    Fighters all_fighters[MAX_MEMBRES * 2];
    int total_fighters = nb_robots1 + nb_robots2;

    for (int i = 0; i < nb_robots1; i++) {
        all_fighters[i] = robot_team1[i];
        if(strlen(all_fighters[i].nom) + strlen(" (e1)") < MAX_CARATERES) {
            strcat(all_fighters[i].nom, " (e1)");
        } else {
            printf("Erreur : nom du combattant trop long pour ajouter le suffixe.\n");
            exit(1);
        }
    }
    for (int i = 0; i < nb_robots2; i++) {
        all_fighters[nb_robots1 + i] = robot_team2[i];
        if(strlen(all_fighters[nb_robots1 + i].nom) + strlen(" (e2)") < MAX_CARATERES) {
            strcat(all_fighters[nb_robots1 + i].nom, " (e2)");
        } else {
            printf("Erreur : nom du combattant trop long pour ajouter le suffixe.\n");
            exit(1);
        }
    }

    // Trier les combattants par vitesse
    speed_select(all_fighters, total_fighters);

    // Boucle principale du jeu
    int context = 1; // Variable de contrôle pour la boucle principale
    while (context) {
        for (int i = 0; i < total_fighters; i++) {
            Fighters *attacker = &all_fighters[i];

            // Vérifier si l'attaquant est encore en vie
            if (attacker->pv_courant <= 0) {
                continue; // Passer le tour si le combattant est vaincu
            }

            if (i < nb_robots1) {
                // Tour d'un robot de l'équipe 1
                printf("\033[1;37mTour de %s (Equipe 1) !\033[0m\n", attacker->nom);
                int target_index = rand() % nb_robots2;
                while (robot_team2[target_index].pv_courant <= 0) {
                    target_index = rand() % nb_robots2; // Choisir une cible valide
                }
                int skill_index = rand() % attacker->nb_skills;
                effect_target(attacker, &robot_team2[target_index], skill_index);
                update_reload(attacker);
                update_effects(attacker);
            } else {
                // Tour d'un robot de l'équipe 2
                printf("\033[1;37mTour de %s (Equipe 2) !\033[0m\n", attacker->nom);
                int target_index = rand() % nb_robots1;
                while (robot_team1[target_index].pv_courant <= 0) {
                    target_index = rand() % nb_robots1; // Choisir une cible valide
                }
                int skill_index = rand() % attacker->nb_skills;
                effect_target(attacker, &robot_team1[target_index], skill_index);
                update_reload(attacker);
                update_effects(attacker);
            }

            // Vérifier si une équipe est vaincue
            int robots1_alive = 0, robots2_alive = 0;
            for (int j = 0; j < nb_robots1; j++) {
                if (robot_team1[j].pv_courant > 0) robots1_alive++;
            }
            for (int j = 0; j < nb_robots2; j++) {
                if (robot_team2[j].pv_courant > 0) robots2_alive++;
            }

            if (robots1_alive == 0) {
                printf("\n\033[1;31mL'equipe 1 a perdu !\033[0m\n");
                lose();
                printf("\n\033[1;32mL'equipe 2 a gagner !\033[0m\n");
                win();
                context = 0; // Sortir de la boucle principale
                break;
            } else if (robots2_alive == 0) {
                printf("\n\033[1;31mL'equipe 2 a perdu !\033[0m\n");
                lose();
                printf("\n\033[1;32mL'equipe 1 a gagner !\033[0m\n");
                win();
                context = 0; // Sortir de la boucle principale
                break;
            }
        }
    }
}
    
#endif