#ifndef LOGIC_O
#define LOGIC_O

#include "../include/settings.h"
#include "fight.o"
#include "script.o"

void wait(int seconds) {
    #ifdef _WIN32
        Sleep(seconds * 1000); // Conversion en millisecondes pour Windows
    #else
        sleep(seconds); // Seconds pour Linux/macOS
    #endif
}

void clean() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

int ask(int max) {
    int choix = -1;
    int result;

    do {
        printf(
            "\033[0m"
            "\033[38;5;214m"
            "\033[3m"
            "\nFaites votre choix de 0 a %d  ? "
            "\033[0m", max - 1
        );

        result = scanf("%d", &choix);

        if (result != 1 || choix < 0 || choix >= max) {
            printf(
                "\033[1;39m"
                "Votre choix est hors de portee. Essayez a nouveau entre 0 et %d.\n"
                "\033[0m", max - 1
            );
            while (getchar() != '\n');
        }
    } while (result != 1 || choix < 0 || choix >= max);

    return choix;
}

int show_fighters(Fighters fighters[], int nb_fighter) {

    if (nb_fighter <= 0) {
        exit(3);
    }

    printf("\n");
    
    for (int i = 0; i < nb_fighter; i++) {
        printf("\033[1;37m%d ~ %s\033[0m ", i, fighters[i].nom);

        printf(
            "("
            " PV: \033[1;33m%d/%d\033[0m,"
            " ATK: \033[1;33m%d\033[0m,"
            " DEF: \033[1;33m%d\033[0m,"
            " AGI: \033[1;33m%d\033[0m,"
            " VIT: \033[1;33m%d\033[0m)\n",
               fighters[i].pv_courant, fighters[i].pv_max, 
               fighters[i].attaque, fighters[i].defense, 
               fighters[i].agilite, fighters[i].vitesse);

        printf("  Competences ~ ");
        for (int j = 0; j < fighters[i].nb_skills; j++) {
            printf("\033[90m(\033[0m\033[1;37m%s\033[0m\033[90m)\033[0m ", fighters[i].skills[j].nom);
        }
        printf("\n");
    }

    return nb_fighter;
}

int select_fighter(int nb_fighters) {
    return ask(nb_fighters);
}

void select_team(Fighters fighters[], int nb_fighters, Teams team[]) {

    printf(
        "\033[0m"
        "\033[38;5;214m"
        "\033[3m"
        "\nQuel sera le nom de votre equipe ? "
        "\033[0m"
    );

    char tmp[MAX_CARATERES];
    scanf("%s", tmp);

    int n = strlen(tmp);
    if (n > MAX_CARATERES) {
        printf("\033[1;31m"
               "Hmm ... C'est bien trop long.\n"
               "\033[0m", MAX_CARATERES);
        exit(1);
    }

    (*team).nom = malloc(sizeof(char) * (n + 1));
    strcpy((*team).nom, tmp);

    while (getchar() != '\n');

    int selected_indices[MAX_MEMBRES] = {-1, -1, -1};
    for (int i = 0; i < MAX_MEMBRES; i++) {
        printf(
            "\n"
            "\033[1;40m"
            "~ %d sur %d"
            "\033[0m", i + 1, MAX_MEMBRES
        );
        int entity_index = select_fighter(nb_fighters);

        int selected = 0;
        for (int j = 0; j < i; j++) {
            if (selected_indices[j] == entity_index) {
                selected = 1;
                break;
            }
        }

        if (selected == 1) {
            printf(
                ""
                "\033[1;31m"
                "%s est deja sous vos ordres."
                "\033[0m\n" ,fighters[entity_index].nom
            );
            i--;
        } else {
            selected_indices[i] = entity_index;
            (*team).fighters[i] = fighters[entity_index];
            (*team).nb_membres++;
            printf(
                "\033[1;39m"
                "%s pret au combat.\n"
                "\033[0m", fighters[entity_index].nom
            );
        }
    }

    printf(
        "\nAinsi, "
    );

    for (int i = 0; i < MAX_MEMBRES; i++) {
        printf("\033[1;39m"
               "%s, "
               "\033[0m", (*team).fighters[i].nom);
    }

    printf(
        "sont vos guerriers.\n\n"
    );

    printf("\n");
}


void random_team(Fighters fighters[], int nb_fighters, Teams team[]) {

    if (nb_fighters < MAX_MEMBRES) {
        printf(
            "\033[1;31m"
            "Il n'y as pas assez de combattants pour former une equipe !"
            "\033[0m\n"
        );
        exit(1);
    }

    int tmp[MAX_MEMBRES] = {-1, -1, -1};
    int random_index;
    int is_duplicate;


    for (int j = 0; j < nb_fighters; j++) {
        do {
            random_index = rand() % nb_fighters; 
            is_duplicate = 0;

            for (int i = 0; i < j; i++) {
                if (tmp[i] == random_index) {
                    is_duplicate = 1;
                    break;
                }
            }
        } while (is_duplicate);

        tmp[j] = random_index;
        team[0].fighters[j] = fighters[random_index];
        team[0].nb_membres++;
    }
}

void show_team(Teams entity_team[], Teams enemy_team[]) {

    wait(2);
    clean();

    speech();

    printf(
        "\n"
        "\033[1;40m"
        "\033[1;31m"
        "%s, %s, %s"
        " contre "
        "%s, %s, %s\n"
        "\033[0m\n", entity_team[0].fighters[0].nom, entity_team[0].fighters[1].nom, entity_team[0].fighters[2].nom,
        enemy_team[0].fighters[0].nom, enemy_team[0].fighters[1].nom, enemy_team[0].fighters[2].nom
    );

}

void univers(Fighters entity[], Teams entity_team[], Teams enemy_team[]) {

    printf(
        "\n\n\033[1;39m"
        "Formez votre equipe."
        "\033[0m"
    );
    select_team(entity, MAX_ENTITYS, &entity_team[0]);

    cauldron();
    printf(
        "\033[1;39m"
        "L'univers forme son equipe."
        "\033[0m\n"
    );
    random_team(entity, MAX_MEMBRES, enemy_team);

    show_team(entity_team, enemy_team);

}

void versus(Fighters entity[], Teams entity_team[], Teams enemy_team[]) {

    printf(
        "\033[1;39m"
        "Formez votre equipe."
        "\033[0m\n"
    );
    select_team(entity, MAX_ENTITYS, &entity_team[0]);

    printf(
        "\033[1;39m"
        "Formez l'equipe adverse."
        "\033[0m\n"
    );
    select_team(entity, MAX_ENTITYS, &enemy_team[0]);

    show_team(entity_team, enemy_team);

}

void random(Fighters entity[], Teams entity_team[], Teams enemy_team[]) {
    
    printf(
        "\n\033[1;31m"
        "L'univers forme les deux equipes..."
        "\033[0m\n\n"
    );
    
    cauldron();

    printf("Invocation equipe alliee...\n");
    random_team(entity, MAX_MEMBRES, entity_team);

    printf("Invocation equipe enemie...\n");
    random_team(entity, MAX_MEMBRES, enemy_team);

    show_team(entity_team, enemy_team);

}


void load(Fighters entity[], Teams entity_team[], Teams enemy_team[], int mode) {
    int nb_fighters = show_fighters(entity, MAX_ENTITYS);

    if (mode == 0) {
        univers(entity, entity_team, enemy_team);
    } else if (mode == 1) {
        versus(entity, entity_team, enemy_team);
    } else if (mode == 2) {
        random(entity, entity_team, enemy_team);
    }

    printf("\n");
}
    

#endif