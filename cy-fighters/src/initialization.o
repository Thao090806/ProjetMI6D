#ifndef INITIALIZATION_C
#define INITIALIZATION_C

#include <stdio.h>
#include "../include/settings.h"

Fighters inisialization_fighter(char *nom, char *description, int pv_max, int attaque, int defense, int agilite, int vitesse) {
    Fighters fighter;

    strcpy(fighter.nom, nom);
    strcpy(fighter.description, description);
    fighter.pv_max = pv_max;
    fighter.pv_courant = pv_max;
    fighter.attaque = attaque;
    fighter.defense = defense;
    fighter.agilite = agilite;
    fighter.vitesse = vitesse;
    fighter.nb_skills = 0;
    fighter.nb_effects = 0;

    return fighter;
}

Skills inisialization_skill(char *nom, char *description, int coefficient, int tours_actifs, int tours_recharge) {
    Skills skill;

    strcpy(skill.nom, nom);
    strcpy(skill.description, description);
    skill.coefficient = coefficient; 
    skill.tours_actifs = tours_actifs; 
    skill.tours_recharge = tours_recharge; 

    return skill;
}

void fighters(Fighters fighters[]) {

    char source[MAX_CARATERES] = "data/fighters.txt";
    printf("Invocation des combattants depuis %s.\n", source);

    FILE *fp = fopen(source, "r");
    if (fp == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier %s.\n", source);
        exit(2);
    }
    char line[MAX_FILES];
    int index = 0;

    while (fgets(line, MAX_FILES, fp)) {
        if (strncmp(line, "Nom;", 4) == 0) {
            char nom[MAX_CARATERES] = {0};
            char description[MAX_CARATERES] = {0};
            int pv_max = 0;
            int attaque = 0;
            int defense = 0;
            int agilite = 0;
            int vitesse = 0;

            if (sscanf(line, "Nom; %[^\n]", nom) != 1) {
                printf("Erreur : Ligne 'Nom;' mal formatee.\n");
                printf("Ligne lue : %s", line);
                break;
            }
            
            if (fgets(line, MAX_FILES, fp) == NULL || sscanf(line, "Description; %[^\n]", description) != 1) {
                printf("Erreur : Ligne 'Description;' mal formee.\n");
                printf("Ligne lue : %s", line);
                break;
            }
            
            if (fgets(line, MAX_FILES, fp) == NULL || sscanf(line, "Point de vie max; %d", &pv_max) != 1) {
                printf("Erreur : Ligne 'Point de vie max;' mal formee.\n");
                printf("Ligne lue : %s", line);
                break;
            }
            
            if (fgets(line, MAX_FILES, fp) == NULL || sscanf(line, "Attaque; %d", &attaque) != 1) {
                printf("Erreur : Ligne 'Attaque;' mal formee.\n");
                printf("Ligne lue : %s", line);
                break;
            }

            if (fgets(line, MAX_FILES, fp) == NULL || sscanf(line, "Defense; %d", &defense) != 1) {
                printf("Erreur : Ligne 'Defense;' mal formee.\n");
                printf("Ligne lue : %s", line);
                break;
            }

            if (fgets(line, MAX_FILES, fp) == NULL || sscanf(line, "Agilite; %d", &agilite) != 1) {
                printf("Erreur : Ligne 'Agilite;' mal formee.\n");
                printf("Ligne lue : %s", line);
                break;
            }

            if (fgets(line, MAX_FILES, fp) == NULL || sscanf(line, "Vitesse; %d", &vitesse) != 1){
                printf("Erreur : Ligne 'Vitesse;' mal formee.\n");
                printf("Ligne lue : %s", line);
                break;
            }

            fighters[index] = inisialization_fighter(nom, description, pv_max, attaque, defense, agilite, vitesse);
            index++;
        }
    }

    fclose(fp);

    if (index == 0) {
        printf("Erreur : Aucun combattant ajouter dans le fichier.\n");
        exit(1);
    }

    if (index > MAX_ENTITYS) {
        printf("Erreur : Trop de combattants dans le fichier + de %d.\n", MAX_ENTITYS);
        exit(1);
    }

    printf("Invocation des combattants termine.\n");
}

void skills(Fighters fighters[]) {

    char source[MAX_CARATERES] = "data/skills.txt";
    printf("Creation des competences depuis %s.\n", source);

    FILE *fp = fopen(source, "r");
    if (fp == NULL) {
        fprintf(stderr, "Erreur lors de l'ouverture du fichier %s.\n", source);
        exit(2);
    }
    char line[MAX_FILES];
    int index = 0;

    while (fgets(line, MAX_FILES, fp)) {
        if (strncmp(line, "Personnage;", 11) == 0) {

            if (index >= MAX_ENTITYS || fighters[index].nom[0] == '\0') {
                printf("Erreur : Combattant introuvable pour les compétences.\n");
                break;
            }

            char nom[MAX_CARATERES] = {0};
            char description[MAX_CARATERES] = {0};
            int coefficient = 0, tours_actifs = 0, tours_recharge = 0;

            for (int i = 0; i < MAX_SKILLS; i++) {
                if (fgets(line, MAX_FILES, fp) == NULL || strlen(line) <= 1 || sscanf(line, "+; %[^\n]", nom) != 1) {
                    printf("Erreur : Ligne '+;' mal formatée ou manquante.\n");
                    continue;
                }

                if (fgets(line, MAX_FILES, fp) == NULL || sscanf(line, "Description; %[^\n]", description) != 1) {
                    printf("Erreur : Ligne 'Description;' mal formatée ou manquante.\n");
                    break;
                }

                if (fgets(line, MAX_FILES, fp) == NULL || sscanf(line, "Coefficient; %d", &coefficient) != 1) {
                    printf("Erreur : Ligne 'Coefficient;' mal formatée ou manquante.\n");
                    break;
                }

                if (fgets(line, MAX_FILES, fp) == NULL || sscanf(line, "Tours actifs; %d", &tours_actifs) != 1) {
                    printf("Erreur : Ligne 'Tours actifs;' mal formatée ou manquante.\n");
                    break;
                }

                if (fgets(line, MAX_FILES, fp) == NULL || sscanf(line, "Tours recharge; %d", &tours_recharge) != 1) {
                    printf("Erreur : Ligne 'Tours recharge;' mal formatée ou manquante.\n");
                    break;
                }

                if (fighters[index].nb_skills >= MAX_SKILLS) {
                    printf("Erreur : Trop de compétences pour le combattant %s.\n", fighters[index].nom);
                    break;
                }

                fighters[index].skills[i] = inisialization_skill(nom, description, coefficient, tours_actifs, tours_recharge);
                fighters[index].nb_skills++;
            }

            if (index >= MAX_ENTITYS) {
                printf("Erreur : Trop de combattants dans le fichier.\n");
                break;
            }

            index++;
        }
    }

    fclose(fp);

    printf("Creation des competences termine.\n");
}

void inisialization(Fighters entity[]) {

    fighters(entity);
    skills(entity);
    
}

#endif